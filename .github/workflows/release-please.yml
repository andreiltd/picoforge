name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Release Please
        uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445 #v4.2.0
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple
          package-name: baremetal-toolchain

  build-and-publish:
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            git \
            pkg-config

          pip install meson

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc # v2.0.7
        with:
          version: "20.1.4"

      - name: Verify Build Tools
        run: |
          echo "=== Build Tools Versions ==="
          cmake --version
          ninja --version
          meson --version
          python3 --version
          just --version

      - name: Build Toolchain
        run: |
          just build

      - name: Verify Build Artifacts
        run: |
          # Fail if neither directory exists
          if [ ! -d "dist/libc" ] || [ ! -d "dist/libcxx" ]; then
            echo "Error: No build artifacts found in dist/"
            exit 1
          fi

      - name: Create Release Archives
        run: |
          mkdir -p release-artifacts

          # Create libc archive if directory exists
          tar -czf release-artifacts/libc-${{ needs.release-please.outputs.tag_name }}.tar.gz -C dist libc
          echo "Created libc archive"

          # Create libcxx archive if directory exists
          tar -czf release-artifacts/libcxx-${{ needs.release-please.outputs.tag_name }}.tar.gz -C dist libcxx
          echo "Created libcxx archive"

          # Create combined archive
          tar -czf release-artifacts/baremetal-toolchain-${{ needs.release-please.outputs.tag_name }}.tar.gz -C dist .

          # List created artifacts
          ls -la release-artifacts/

      - name: Generate checksums
        run: |
          cd release-artifacts
          sha256sum *.tar.gz > checksums.txt
          cat checksums.txt

      - name: Upload Release Assets
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 #2.3.2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: release-artifacts/*
